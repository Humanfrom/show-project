const bcrypt = require("bcryptjs");
const qr = require("qrcode");
const User = require("../models/User");
const winston = require("winston");
const config = require("config");

// –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞
const logger = winston.createLogger({
  level: "info", // —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  format: winston.format.json(), // —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤
  transports: [
    new winston.transports.File({ filename: "./public/logs/combined.log" }),
  ],
});

//------------------ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–∞—Å—Å–∏–≤—ã ------------------------
const salesArray = [
  "–í–µ—Å–µ–Ω–Ω–∏–µ —É–ª—É–Ω—ã - —Å–∫–∏–¥–∫–∞ 50%",
  "–≠–ª–∏—Ç–Ω—ã–µ –Ω–∞–±–æ—Ä—ã –ø—É—ç—Ä–æ–≤ - +1 —á–∞–π –≤ –ø–æ–¥–∞—Ä–æ–∫",
  "–ü—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å –∑–∞ –∫—Ä–∞—Å–Ω—ã–π —á–∞–π",
  "–ê—Ä–æ–º–∞—Ç–∏–∫–∞ - 2 –ø–æ —Ü–µ–Ω–µ 1",
];

class TelegramBotService {
  constructor() {
    this.chatHash = null;
    this.currentPage = "–ö –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—é";
    this.user = { role: "guest", name: "–≥–æ—Å—Ç—å" };
    this.chatKey = null;
    this.bot = null;
  }

  async reinit(chatId, bot) {
    const user = await User.findOne({ chat_id: Number(chatId) });

    this.chatHash = await bcrypt.hash(chatId + "_chat", 5);
    this.currentPage = user ? "üì±¬†–ú–µ–Ω—é" : "–ö –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—é";
    this.user = user
      ? { role: user._doc.status, name: user._doc.login, ...user }
      : { role: "guest", name: "–≥–æ—Å—Ç—å" };
    this.chatKey = null;
    this.bot = bot;
  }

  sendMessage(chatId, text, options) {
    this.bot.sendMessage(chatId, text, options);
  }

  async getUser(text = null) {
    try {
      const user = text
        ? await User.findOne({ chat_key: String(text).trim() })
        : await User.findOne({ chat_hash: this.chatHash });
      return user;
    } catch (e) {
      return null;
    }
  }

  async setUser(user, data = {}) {
    try {
      for (let prop in data) {
        user[prop] = data[prop];
      }
      await user.save();
      return user;
    } catch (e) {
      return null;
    }
  }

  async getSubscription(subscription = null) {
    try {
      const data =
        subscription && (await Subscription.findOne({ subscription }));
      return data;
    } catch (e) {
      return null;
    }
  }

  setPage(page = null) {
    this.currentPage = page;
  }

  async route(bot, chatId, props = {}) {
    const { text, message } = props;
    const page = props.page || this.currentPage;
    const command = text && text[0] == "/" ? text : null;
    if (!this.chatHash) {
      this.reinit(chatId);
    }

    let transition = false;
    if (this.currentPage && page != this.currentPage) {
      transition = true;
      this.setPage(page);
    }

    logger.log({
      level: "info",
      message:
        [text, chatId, props?.page, this.currentPage].join(", ") +
        " " +
        new Date().toJSON() +
        ";",
    });

    if (command) {
      switch (command) {
        case "/start":
          this.reinit(chatId);
          bot.sendSticker(
            chatId,
            `https://tlgrm.ru/_/stickers/d5d/cea/d5dcea3b-23f6-3976-a170-36e9281a0843/9.webp`
          );
          bot.sendMessage(
            chatId,
            "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤ –±–æ—Ç–µ —Å–µ—Ä–≤–∏—Å–∞ Navili! ü™¨ –î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –æ–±—â–µ–Ω–∏—è, –ø—Ä–æ—à—É –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å—Å—è...",
            this.getButtons("start")
          );
          break;
        case "/info":
          const fullName = message.from.last_name
            ? `${message.from.first_name} ${message.from.last_name}`
            : message.from.first_name;
          bot.sendMessage(
            chatId,
            `–¢—ã —É–∫–∞–∑–∞–ª, —á—Ç–æ —Ç–µ–±—è –∑–æ–≤—É—Ç ${fullName}. \n–ö–æ–¥ –Ω–∞—à–µ–π –±–µ—Å–µ–¥—ã: ${this.chatHash}`
          );
          break;
        default:
          bot.sendMessage(chatId, `–ü—Ä–æ—Å—Ç–∏, –Ω–æ —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã.`);
      }
      return;
    }

    const link = `${config.frontURL}/api/ref?tg=${this.chatHash}`;
    console.log(link);
    if (this.user.role !== "guest") {
      switch (page) {
        case "–ú–µ–Ω—é":
          bot.sendMessage(
            chatId,
            `–°–Ω–æ–≤–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –í–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é, —É–≤–∞–∂–∞–µ–º—ã–π ${this.user.name}!`,
            { parse_mode: "Markdown", ...this.getButtons("user-menu") }
          );
          return;
        case "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
          const subsData = null; //this.getSubscription(this.user.subscription);
          const achievements =
            this.user?.achievements && this.user?.achievements.length
              ? this.user.achievements.join(", ")
              : "–µ—â—ë –Ω–µ —Å–≤–µ—Ä—à–∏–ª–∏—Å—å";
          const subscriptionInfo = subsData ? subsData : "–æ—Ç—Å—É—Å—Ç–≤—É—é—Ç";
          let gradeInfo = "";
          switch (this.user.grade) {
            case 1:
              gradeInfo = "–í–∏–∂—É —Ç—ã —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª —Å–≤–æ–π –ø—É—Ç—å! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!";
            case 2:
              gradeInfo = "–û —Å—É–º—Ä–∞—á–Ω—ã–π –≤–æ–∏–Ω! –¢—ã —É–∂–µ —Å–¥–µ–ª–∞–ª —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —à–∞–≥...";
            case 3:
              gradeInfo =
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –Ω–µ–±–µ—Å–Ω—ã–π —Å—Ç—Ä–∞–Ω–Ω–∏–∫! –í–∏–∂—É —Ç—ã —É–∂–µ –ø—Ä–∏—É—Å–ø–µ–ª –Ω–∞ —Å–≤–æ—ë–º –ø—É—Ç–∏.";
            case 4:
              gradeInfo =
                "–ì–µ–Ω–µ—Ä–∞–ª —á–µ—Ç—ã—Ä—ë—Ö –ø—Ä–µ–¥–µ–ª–æ–≤, —Ä–∞–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–µ–±—è –∑–¥–µ—Å—å.";
            case 5:
              gradeInfo = "–ú–µ–∂–≥–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –Ω–∞–≥–∏–±–∞—Ç–æ—Ä, –∞ —Ç—ã —Ö–æ—Ä–æ—à!";
            default:
              gradeInfo =
                "–û –º—É–¥—Ä–µ—Ü —Ç—Ä—ë—Ö —Å–æ—Å–µ–Ω, –º–Ω–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–≤–æ–π —Å—Ç–∞—Ç—É—Å. –ù–æ —Ç—ã –∫—Ä—É—Ç!";
          }
          bot.sendMessage(
            chatId,
            `*–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:* ${subscriptionInfo}.\n\n*–ß–∞–π–Ω—ã–µ —Å–≤–µ—Ä—à–µ–Ω–∏—è:* ${achievements}.\n\n_${gradeInfo}_`,
            { parse_mode: "Markdown", ...this.getButtons("away") }
          );
          return;
        case "–ú–æ–π —Å—Ç–∞—Ç—É—Å":
          bot.sendMessage(
            chatId,
            `*–°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏:* ${"–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ"}\n\n*–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:* ${"–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ"}\n\n*–î–æ—Å—Ç–∞–≤–∫–∞ –¥–ª–∏—Ç—Å—è:* ${"3 –¥–Ω—è"}\n\n*–ù–æ–º–µ—Ä –¥–æ—Å—Ç–∞–≤–∫–∏:* ${"197556214"}`,
            { parse_mode: "Markdown", ...this.getButtons("delivery") }
          );
          return;
        case "–ê–∫—Ü–∏–∏":
          const sales = salesArray.map((item) => "‚Ä¢ " + item).join("\n");
          bot.sendMessage(chatId, `*–ê–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –í–∞–º:* \n${sales}`, {
            parse_mode: "Markdown",
            ...this.getButtons("away"),
          });
          return;
        case "–ü–æ–º–æ—â—å":
          bot.sendMessage(
            chatId,
            `–ß–µ–º –º—ã –º–æ–∂–µ–º –í–∞–º –ø–æ–º–æ—á—å? –í–æ—Ç [–Ω–∞—à –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª](https://news.google.com/home?hl=ru&gl=RU&ceid=RU%3Aru), –≤–æ–∑–º–æ–∂–Ω–æ –í–∞—à–∞ –ø—Ä–æ–±–ª–µ–º–∞ —É–∂–µ —Ä–µ—à–µ–Ω–∞.\n\n–ï—â—ë –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã?`,
            { parse_mode: "Markdown", ...this.getButtons("help") }
          );
          return;
        case "–í–æ–ø—Ä–æ—Å—ã":
          bot.sendMessage(
            chatId,
            `–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤ –∏–ª–∏ —Ç—É—Ç –±—É–¥–µ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –±–æ–ª–µ–µ –æ–±—à–∏—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞. –Ø –ø–æ–∫–∞ —Ö–∑...`
          );
          return;
        case "–°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ":
          if (transition) {
            bot.sendMessage(
              chatId,
              `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É –∏ –º—ã –æ—Ç–≤–µ—Ç–∏–º –í–∞–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.\n\n_–£–±–µ–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ—Å—å–±–∞ –Ω–µ —Ñ–ª—É–¥–∏—Ç—å_`,
              { parse_mode: "Markdown", ...this.getButtons("away") }
            );
          } else {
            bot.sendMessage(
              chatId,
              `–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –¢–µ–∫—Å—Ç –í–∞—à–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è:\n\n_${text}_\n\n–ú—ã –æ—Ç–≤–µ—Ç–∏–º –í–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.`,
              { parse_mode: "Markdown", ...this.getButtons("away") }
            );
          }
          return;
        case "–í—ã–π—Ç–∏":
          this.reinit(chatId);
          bot.sendMessage(
            chatId,
            `–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ. –î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á!`,
            { parse_mode: "Markdown", ...this.getButtons("user-menu") }
          );
          return;
        default:
          bot.sendMessage(
            chatId,
            `–ö–∞–∫–æ–µ –¥–æ—Å–∞–¥–Ω–æ–µ –Ω–µ–¥–æ—Ä–∞–∑—É–º–µ–Ω–∏–µ! –í–µ—Ä–æ—è—Ç–Ω–æ —è –∑–∞–¥—Ä–µ–º–∞–ª –∏ –∑–∞–±—ã–ª –Ω–∞ —á—ë–º –º—ã —Å —Ç–æ–±–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å...`,
            { parse_mode: "Markdown", ...this.getButtons("user-menu") }
          );
          return;
      }
    } else {
      switch (page) {
        case "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è":
          if (transition) {
            const pathQr = `./public/img/qr/${chatId}.png`;
            const qrOptions = {
              errorCorrectionLevel: "H",
              type: "image/png",
              quality: 0.92,
              margin: 1,
            };
            const newQrRef = qr.toFile(pathQr, link, qrOptions, (err) => {
              if (err) {
                bot.sendMessage(
                  chatId,
                  `–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –∏ QR –∫–æ–¥ –Ω–µ —Å–º–æ–≥ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å—Å—è, –º—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —ç—Ç–∏–º`
                );
              } else {
                bot.sendPhoto(chatId, pathQr);
              }
            });
            bot.sendMessage(
              chatId,
              `–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å QR –∫–æ–¥–æ–º –∏–ª–∏ [—ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π](${link}) –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ —Å–∞–π—Ç. \n–¢–∞–∫–∂–µ –í—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –∏–∑ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –≤ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.`,
              { parse_mode: "Markdown" }
            );
          } else {
            const user = await this.getUser(text);
            if (user) {
              const update = await this.setUser(user, {
                chat_hash: this.chatHash,
                chat_id: chatId,
              });
              if (update) {
                this.user = {
                  role: user._doc.status,
                  name: user._doc.login,
                  ...user,
                };
                this.chatKey = text;
                bot.sendMessage(
                  chatId,
                  `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç, ${this.user.name}. –ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å?`,
                  { parse_mode: "Markdown", ...this.getButtons("user-menu") }
                );
              } else {
                logger.log({
                  level: "error",
                  message:
                    [text, chatId, user._doc.login].join(", ") +
                    ", update " +
                    new Date().toJSON() +
                    ";",
                });
                bot.sendMessage(
                  chatId,
                  `–£–≤–∞–∂–∞–µ–º—ã–π, ${this.user.name}. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ú—ã —É–≤–µ–¥–æ–º–∏–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ –í–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –º—ã —Å–∫–æ—Ä–æ —Å –í–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.`
                );
              }
            } else {
              bot.sendMessage(
                chatId,
                `–ö–æ–¥ –Ω–µ–≤–µ—Ä–µ–Ω –∏–ª–∏ —É–∫–∞–∑–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.`,
                this.getButtons("login")
              );
            }
          }
          return;
        case "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
          bot.sendMessage(
            chatId,
            `–í–æ—Ç –í–∞—à–∞ [—Å—Å—ã–ª–∫–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏](${link}) –Ω–∞ –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!`,
            { parse_mode: "Markdown" }
          );
          return;
        default:
          bot.sendMessage(
            chatId,
            "–ò —Å–Ω–æ–≤–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! ü™¨ –ù–æ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –æ–±—â–µ–Ω–∏—è, –≤—Å—ë –∂–µ –Ω—É–∂–Ω–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å—Å—è...",
            this.getButtons("start")
          );
          return;
      }
    }

    bot.sendMessage(chatId, `–ö–∞–∫ —Ç—ã —Å—é–¥–∞ –ø–æ–ø–∞–ª?`, this.getButtons());
  }

  createInvoice (bot, chatId, payment) {
    bot.sendInvoice(chatId)
  }

  getButtons(type) {
    switch (type) {
      case "start":
        return {
          reply_markup: JSON.stringify({
            keyboard: [
              [
                { text: `‚úîÔ∏è¬†–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è` },
                { text: "üìÉ¬†–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data: "page/registration" },
              ],
            ],
            resize_keyboard: true,
          }),
        };
      case "user-menu":
        return {
          reply_markup: JSON.stringify({
            keyboard: [
              [
                { text: "üñ•¬†–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ", callback_data: "page/info" },
                { text: "ü™™¬†–ú–æ–π —Å—Ç–∞—Ç—É—Å", callback_data: "page/satus" },
              ],
              [
                { text: "üõç¬†–ê–∫—Ü–∏–∏", callback_data: "page/sales" },
                { text: "üõü¬†–ü–æ–º–æ—â—å", callback_data: "page/help" },
              ],
              [{ text: "‚ùå¬†–í—ã–π—Ç–∏", callback_data: "page/exit" }],
            ],
            resize_keyboard: true,
          }),
        };
      case "login":
        return {
          reply_markup: JSON.stringify({
            keyboard: [[{ text: "‚ùå¬†–ù–∞–∑–∞–¥" }]],
            resize_keyboard: true,
          }),
        };
      case "away":
        return {
          reply_markup: JSON.stringify({
            keyboard: [[{ text: "üì±¬†–ú–µ–Ω—é" }]],
            resize_keyboard: true,
          }),
        };
      case "delivery":
        return {
          reply_markup: JSON.stringify({
            keyboard: [
              [{ text: "üì±¬†–ú–µ–Ω—é" }, { text: "‚ùóÔ∏è¬†–°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ" }],
            ],
            resize_keyboard: true,
          }),
        };
      case "help":
        return {
          reply_markup: JSON.stringify({
            keyboard: [
              [{ text: "‚ùì¬†–í–æ–ø—Ä–æ—Å—ã" }, { text: "‚ùóÔ∏è¬†–°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ" }],
            ],
            resize_keyboard: true,
          }),
        };
      default:
        return {
          reply_markup: JSON.stringify({
            keyboard: [
              [
                { text: "üì±¬†–ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data: "goto_top" },
                { text: "‚ùóÔ∏è¬†–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ", callback_data: "error" },
              ],
            ],
            resize_keyboard: true,
          }),
        };
    }
  }
}

module.exports = TelegramBotService;
